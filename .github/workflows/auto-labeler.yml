---
name: Auto label PRs
"on":
  pull_request_target:
    types: [opened, reopened, synchronize, edited, ready_for_review]

jobs:
  by-path:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v5
        with:
          configuration-path: .github/labeler.yml
          sync-labels: true

  by-title-body:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Apply labels based on title/body/directives
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const title = (pr.title || "").toLowerCase();
            const body = (pr.body || "");

            const labels = new Set();

            // Conventional keywords in title
            if (title.startsWith("feat") || title.includes("[feat]")) {
              labels.add("feat");
            }
            if (title.startsWith("fix") || title.includes("[fix]")) {
              labels.add("fix");
            }
            if (title.startsWith("docs") || title.includes("[docs]")) {
              labels.add("docs");
            }
            if (title.startsWith("chore") || title.includes("[chore]")) {
              labels.add("chore");
            }
            if (title.startsWith("test") || title.includes("[test]")) {
              labels.add("tests");
            }
            if (title.startsWith("refactor") ||
                title.includes("[refactor]")) {
              labels.add("refactor");
            }
            if (title.includes("[wip]")) {
              labels.add("do-not-merge");
            }

            // Copilot directives block in body:
            // <!-- copilot:labels
            // automerge
            // priority:high
            // docs
            // -->
            const m = body.match(/<!--\s*copilot:labels([\s\S]*?)-->/i);
            if (m) {
              const lines = m[1].split(/\r?\n/).map(s => s.trim())
                              .filter(Boolean);
              for (const line of lines) {
                labels.add(line);
              }
            }

            // Normalize and validate against existing repo labels
            const { data: repoLabels } = await github.rest.issues
              .listLabelsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 200
              });
            const existing = new Set(repoLabels.map(l => l.name.toLowerCase()));
            const toApply = Array.from(labels).filter(l =>
              existing.has(l.toLowerCase()));

            if (toApply.length) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: toApply
              });
            }
